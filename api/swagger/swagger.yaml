swagger: "2.0"
info:
  version: "0.1.0"
  title: Todo Sample App
# during dev, should point to your local machine
host: localhost:8080
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /todos:
    x-swagger-router-controller: todos
    get:
      tags: [Todos]
      summary: todoリスト取得
      description: クエリに一致するtodo情報を更新日時の降順で一覧取得します。
      operationId: getTodoList
      parameters:
        - in: query
          name: q
          type: string
          description: 検索キーワード
        - in: query
          name: status
          type: string
          enum: [undone, done]
          description: ステータス
      responses:
        '200':
          description: successful operation
          schema:
            title: todos
            type: array
            items:
              $ref: '#/definitions/TodoModel'
    post:
      tags: [Todos]
      summary: todo情報登録
      description: 新しいtodo情報を登録します。
      operationId: createTodo
      parameters:
        - in: body
          name: entry
          description: todo entry parameter
          required: false
          schema:
            $ref: '#/definitions/TodoEntry'
      responses:
        '201':
          description: successful operation
          schema:
            $ref: '#/definitions/TodoModel'
        '400':
          description: Bad request
          schema:
            $ref: "#/definitions/Error"
  /todos/{id}:
    x-swagger-router-controller: todos
    parameters:
      - name: id
        in: path
        description: todo id
        required: true
        type: string
        minLength: 16
        maxLength: 16
    get:
      tags: [Todos]
      summary: todo情報取得
      description: 指定したidに一致するtodo情報を取得します。
      operationId: getTodoById
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TodoModel'
        '404':
          description: A todo with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
    put:
      tags: [Todos]
      summary: todo情報更新
      description: 指定したidに一致するtodo情報を更新します。
      operationId: updateTodo
      parameters:
        - name: entry
          in: body
          description: todo entry parameter
          required: true
          schema:
            $ref: '#/definitions/TodoEntry'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/TodoModel'
        '400':
          description: Bad request
          schema:
            $ref: "#/definitions/Error"
        '404':
          description: A todo with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags: [Todos]
      summary: todo情報削除
      description: 指定したidに一致するtodo情報を削除します。
      operationId: deleteTodo
      responses:
        '204':
          description: successful operation
        '404':
          description: A todo with the specified ID was not found.
          schema:
            $ref: "#/definitions/Error"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  TodoEntry:
    type: object
    title: TODOエントリ
    properties:
      title:
        type: string
        description: タイトル
        example: 買い物
      content:
        type: string
        description: 内容
        example: お茶、豆腐、豚肉300g、うどん
      done:
        type: boolean
        description: 完了フラグ
        example: false
  TodoModel:
    type: object
    title: TODOモデル
    required: [_id, title, done, createdAt, updatedAt]
    properties:
      _id:
        type: string
        description: todo id
        readOnly: true
        example: dQmwl6ojF9MB0Z8y
      title:
        type: string
        description: タイトル
        example: 買い物
      content:
        type: string
        description: 内容
        example: お茶、豆腐、豚肉300g、うどん
      done:
        type: boolean
        description: 完了フラグ
        example: false
      createdAt:
        type: string
        format: date-time
        description: 作成日時
        example: 2018-09-20T10:00:00Z
      updatedAt:
        type: string
        format: date-time
        description: 更新日時
        example: 2018-09-20T10:00:00Z
  Error:
    type: object
    title: エラー情報
    required: [code, message]
    properties:
      code:
        type: integer
      message:
        type: string
